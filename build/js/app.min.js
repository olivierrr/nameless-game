(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "name": "nameless-game",
  "version": "0.1.0",
  "description": "nameless",
  "main": "build/js/app.min.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:olivierrr/nameless-game.git"
  },
  "author": "olivierrr",
  "license": "MIT",
  "browser": {
    "lodash": "./node_modules/lodash/dist/lodash.compat.js",
    "Stats": "./src/js/lib/stats.min.js"
  },
  "browserify-shim": {
    "lodash": {
      "exports": "_"
    },
    "Stats": {
      "exports": "Stats"
    }
  },
  "devDependencies": {
    "browserify": "^4.1.5",
    "browserify-shim": "^3.5.0",
    "grunt": "^0.4.5",
    "grunt-browserify": "^2.1.0",
    "grunt-cache-bust": "^0.3.6",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-connect": "^0.7.1",
    "grunt-contrib-copy": "^0.5.0",
    "grunt-contrib-jade": "^0.11.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-stylus": "^0.16.0",
    "grunt-contrib-uglify": "^0.4.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-open": "^0.2.3",
    "grunt-pngmin": "^0.6.1"
  },
  "dependencies": {
    "grunt-contrib-compress": "^0.9.1",
    "lodash": "^2.4.1",
    "node-static": "^0.7.6",
    "phaser": "^2.1.1",
    "socket.io": "^1.1.0"
  }
}

},{}],2:[function(require,module,exports){

var Player = require('./Player')

/*
 * Arena class
 *
 * @constructor Arena
 */
var Arena = function (game) {

	/*
	 * @reference {Phaser.game} game
	 */
	this.game = game

	/*
	 * @references {Player}
	 */
	this.players = {}

	this.init()

	return this
}

/*
 * @method init
 */
Arena.prototype.init = function() {
	this.game.physics.startSystem(Phaser.Physics.P2JS)

  this.game.physics.p2.gravity.y = 800
  this.game.physics.p2.world.solver.iterations = 1000

  this.game.physics.wallMaterial = this.game.physics.p2.createMaterial('wallMaterial')
  this.game.physics.p2.setWorldMaterial(this.game.physics.wallMaterial, true, true, true, true)

  // Turn on impact events for the world, without this we get no collision callbacks
  this.game.physics.p2.setImpactEvents(true)

  // debug
  window.P2 = this.game.physics.p2
}

/*
 * @method
 */
Arena.prototype.createPlayers = function () {
	this.players['p1'] = new Player(this.game, 200, 200)
	this.players['p2'] = new Player(this.game, 600, 200)
}

/*
 * @method
 */
Arena.prototype.resetPlayers = function () {
	this.forEachPlayer(function (p) {
		p.reset()
	})
}

/*
 * @method
 */
Arena.prototype.setControllers = function (p1, p2) {
	this.players['p1'].setController(p1 || 'dummy')
	this.players['p2'].setController(p2 || 'dummy')
}

/*
 * multi purpose player iterator
 *
 * @method
 */
Arena.prototype.forEachPlayer = function (cb) {
	var players = this.players
	Object.keys(players).forEach(function (p) { cb(players[p]) })
}

/*
 * @method
 */
Arena.prototype.newTurn = function () {
	this.forEachPlayer(function (p) {
		p.method1()
	})
}

/*
 * @method
 */
Arena.prototype.sameTurn = function () {
	this.forEachPlayer(function (p) {
		p.method2()
	})
}

/*
 * @method
 */
Arena.prototype.cinematicPlayback = function () {
	this.forEachPlayer(function (p) {
		p.cinematicExecuteMoves()
	})
}

/*
 * @method destroy
 */
Arena.prototype.destroy = function () {
	this.forEachPlayer(function (p) { 
		p.destroy() 
	})
	this.game.physics.destroy()
}

module.exports = Arena
},{"./Player":4}],3:[function(require,module,exports){

/*
 * Button class
 *
 * @constructor Button
 */
var Button = function (game, settings, cb) {

	var x = settings.x 					|| 100
	var y = settings.y 					|| 100
	var text = settings.text 		|| 'button'
	var font = settings.font 		|| '40px Arial'
	var fill = settings.fill 		|| '#ffffff'
	var align = settings.align	|| 'center'

	if(settings.sprite) {
		console.log('todo')
		//	todo - sprite background
	}

  this.btn = game.add.text(x, y, text, { font: font, fill: fill, align: align } )

  this.btn.anchor.setTo(0.5, 0.5)
  this.btn.inputEnabled = true

  this.btn.events.onInputDown.add(function() { cb() })
}

module.exports = Button
},{}],4:[function(require,module,exports){
var Ragdoll = require('./Ragdoll.js')

/*
 * Player class
 *
 * @extends Ragdoll
 * @constructor Player
 */
var Player = function (game, x, y) {

  /**
   * available controllers: 
   *  'me'      - controlled by users input
   *  'dummy'   - no conroller
   *  'network' - controller over network
   *
   * @property {String} controller
   * @default 'dummy'
   */
  this.controller = 'dummy'

	/**
	 * @reference {Phaser.game} game
	 */
	this.game = game

	/**
 	 * @Object {Phaser.group} ragdoll
	 */
	this.ragdoll = Ragdoll(game, x, y)

	/** 
   * @property {Boolen} isAllowingInput
   */
  this.isAllowingInput = true

  /**
   * a turn is an Array of actions
   * an 'action' is a joint event - ex: {jointName:'neck', type:'relax'}
   *
   * @property {Array} turnHistory
   */
  this.turnHistory = []

  /**
   * @property {Array} currentPosition
   */
  this.currentPosition = []

  /**
   * @property {Array} currentPosition
   */
  this.initialPosition = []

  /**
   * @property {Number} health
   */
  this.health = 100

  /**
   * request an animation playback
   *
   * @property {Boolean} isResetingPlayback
   */
  this.isResetingPlayback = false

  this.savePosition()
  this.initialPosition = this.currentPosition 
}

/**
 * pushes an empty turn Object to turnHistory
 * ragdoll.newAction will push moves to newly pushed Object
 *
 * @method newTurn
 */
Player.prototype.newTurn = function () {
  this.turnHistory.push({})

  // this shouldn't be here
  this.ragdoll.children.forEach(function (part) {
    part.loadTexture('whitesquare')
  })
}

/**
 * register a new move to latest turn on turnHistory
 *
 * @method newAction
 * @param {Object} move
 */
Player.prototype.newAction = function (move) {
  this.turnHistory[this.turnHistory.length-1][move.jointName] = move.type
}

/**
 * save current position and velocity
 * 
 * @method savePosition
*/
Player.prototype.savePosition = function () {

  this.currentPosition = this.ragdoll.children.map( function (part) {
    var data = part.body.data
    return {
      x: data.position[0], 
      y: data.position[1],
      vx: data.velocity[0],
      vy: data.velocity[1],
      angle: data.angle,
      angularVelocity: data.angularVelocity,
      wlambda: data.wlambda,
      vlambdax : data.vlambda[0],
      vlambday : data.vlambda[1]
    }
  })
  // var self = this
  // var joints = Object.keys(this.ragdoll.joints).map(function (key) {
  //   return self.ragdoll.joints[key].angle
  // })

  // this.currentPosition.push(joints)

  // console.log(this.ragdoll.joints['rightHipJoint'].angle, '!!!!!')
}

/**
 * move ragdoll to last position on postision history
 * 
 * @method loadPosition
 */
Player.prototype.loadPosition = function () {

  var pos = this.currentPosition
  this.ragdoll.children.forEach(function(part, i) {
    var data = part.body.data
    data.position[0] = pos[i].x
    data.position[1] = pos[i].y
    data.angle = pos[i].angle,
    data.angularVelocity = pos[i].angularVelocity,
    data.velocity[0] = pos[i].vx,
    data.velocity[1] = pos[i].vy,
    data.wlambda = pos[i].wlambda,
    data.vlambda[0] = pos[i].vlambdax,
    data.vlambda[1] = pos[i].vlambday
  })

  // //console.log(this.ragdoll.joints['rightHipJoint'].angle)
  // var self = this
  // var joints = this.currentPosition[this.currentPosition.length-1]
  // //console.log(joints)
  // Object.keys(this.ragdoll.joints).forEach(function (key, i) {
  //   self.ragdoll.joints[key].angle = joints[i]
  // })

  //console.log(this.ragdoll.joints['rightHipJoint'].angle)
  if(this.controller === 'me'){
    //console.log(this.ragdoll.children[0].body.data)
    
  }
}

/**
 * create shallow copy of ragdolls position
 *
 * @method clone
 * @return {Phaser.Group}
*/
Player.prototype.clone = function () {
  var ragdollClone = this.game.add.group()

  this.ragdoll.children.forEach(function(part) {
    var clone = ragdollClone.create(part.position.x, part.position.y, part.key)
    clone.width = part.width
    clone.height = part.height
    clone.rotation = part.rotation
    clone.anchor.x = part.anchor.x
    clone.anchor.y = part.anchor.y
    clone.name = part.name
  })

  return ragdollClone
}

/*
 * @method setLastTurn
 */
Player.prototype.setLastTurn = function (turn) {
  this.turnHistory[this.turnHistory.length-1] = turn
}

/**
 * @method getLastTurn
 */
Player.prototype.getLastTurn = function () {
  return this.turnHistory[this.turnHistory.length-1]
}

/**
 * singleton clone
 *
 * todo - could be forcing position on previously made clone instead of destroying and creating new instance 
 *
 * @method shadow
 */
Player.prototype.shadow = function () {

  this.destroyShadow()

  this.shadowClone = this.clone()
  
  // TODO
  attachEvents(this.shadowClone, this)
}

/**
 * @method destroyShadow
 */
Player.prototype.destroyShadow = function() {
  if(this.shadowClone) this.shadowClone.destroy()
}

/**
 * move ragdoll
 *
 * @method executeMove
 * @param {String} jointName
 * @param {String} type
 */
Player.prototype.executeMove = function (jointName, type) {
  switch (type) {
    case 'expand'  : this.ragdoll.flex(jointName)     ;break
    case 'contract': this.ragdoll.contract(jointName) ;break
    case 'relax'   : this.ragdoll.relax(jointName)    ;break
    case 'tense'   : this.ragdoll.tense(jointName)    ;break
  }
}

/**
 * a turn is an array of moves
 *
 * @method executeMoves
 * @param {Array} turn
 */
Player.prototype.executeMoves = function (turn, alpha) {
  var _this = this

  _this.ragdoll.alpha = alpha || 1 

  Object.keys(turn).forEach(function (jointName) {
    _this.executeMove(jointName, turn[jointName])
  })
}

/**
 * @method cinematicExecuteMoves
 */
Player.prototype.cinematicExecuteMoves = function () {
  this.destroyShadow()
  this.executeMoves(this.getLastTurn(), 1)
}

/**
 * works like nodes EventEmitter.once for @property isResetingPlayback
 *
 * @method resetPlayback
 */
Player.prototype.resetPlayback = function () {
  if(this.isResetingPlayback === true) {
    this.isResetingPlayback = false
    return true
  }
  else return false
}

/**
 * shim p2.onBeginContact to work on Phaser.group @ragdoll
 *
 * @method onCollision
 */
Player.prototype.onCollision = function (cb) {
  this.ragdoll.children.forEach(function (part) {
    part.body.onBeginContact.add(function (a, b, c, d) {
      cb(a, b, c, d)
    })
  })
}

/**
 * reset back to initial instance position
 *
 * @method reset
 */
Player.prototype.reset = function() {
  this.turnHistory = []
  this.currentPosition = this.initialPosition
  this.loadPosition()
  this.shadow()
}

/**
 * @method destroy
 */
Player.prototype.destroy = function() {
  if(this.shadowClone) this.shadowClone.destroy()
  this.ragdoll.destroy()
  this.turnHistory = null
  this.currentPosition = null
  this.initialPosition = null
}

//// TODO ////

// TEMP - TODO
function attachEvents (ragdoll, ctx) {
	ragdoll.children.forEach(function(part){
    part.inputEnabled = true
    part.events.onInputDown.add(function(e) {
      muscleClick.call(ctx, e.name)
    })
  })
}

// TEMP - TODO
function muscleClick (muscleName) {

  if(this.isAllowingInput === false) return

  //if(muscleName === 'upperBody') return
  //if(muscleName === 'pelvis') return

  joint = {
    'head'         : 'neckJoint',
    'upperLeftArm' : 'leftShoulder',
    'lowerLeftArm' : 'leftElbowJoint',
    'upperRightArm': 'rightShoulder',
    'lowerRightArm': 'rightElbowJoint',
    'upperLeftLeg' : 'leftHipJoint',   
    'lowerLeftLeg' : 'leftKneeJoint',  
    'upperRightLeg': 'rightHipJoint', 
    'lowerRightLeg': 'rightKneeJoint', 
    'pelvis'       : 'spineJoint',     
    'upperBody'    : 'spineJoint'
  }

  var jointName = joint[muscleName]
  var jointState = this.getLastTurn()[jointName]
  var action

  if(jointState === 'expand') action = 'contract'
  else if(jointState === 'contract') action = 'relax'
  else if(jointState === 'relax') action = 'expand'
  else action = 'expand'

  console.log(action, jointName)

  this.newAction({
  	jointName: jointName, 
  	type: action
  })

  textures = {
    'expand'  : 'redsquare',
    'contract': 'bluesquare',
    'relax'   : 'whitesquare'
  }

  this.shadowClone.children.filter(function (part) {
    return part.name === muscleName
  })[0].loadTexture(textures[action])

  this.isResetingPlayback = true
}

Player.prototype.setController = function(controller) {
  this.controller = controller

  if(controller === 'dummy') {
    this.isAllowingInput = false
  }
  if(controller === 'network') {
    this.isAllowingInput = false
  }
  if(controller === 'me') {

  }
}

// -todo
Player.prototype.method1 = function () {
  this.ragdoll.alpha = 0.5
	this.ragdoll.relaxAll()
  this.newTurn()
  this.savePosition()
  this.shadow()
}
// -todo
Player.prototype.method2 = function () {
  this.ragdoll.relaxAll()
	this.loadPosition()
  
  this.executeMoves(this.getLastTurn(), 0.5)
}

module.exports = Player
},{"./Ragdoll.js":5}],5:[function(require,module,exports){
module.exports = function(game, offsetX, offsetY) {

  var CONSTRAINT_FORCE = 999999999999
  var M = 100 // scale
  var MOTOR_FORCE = 5

  var bodySprites = {}
  var bodyJoints = {}
  var bodyParts = {}

  // normalized scales
  var sizes = {}
  sizes.shouldersDistance = 0.4
  sizes.upperArmLength = 0.5
  sizes.lowerArmLength = 0.5
  sizes.upperArmSize = 0.2
  sizes.lowerArmSize = 0.2
  sizes.neckLength = 0.1
  sizes.headRadius = 0.15
  sizes.upperBodyLength = 0.6
  sizes.pelvisLength = 0.4
  sizes.upperLegLength = 0.6
  sizes.upperLegSize = 0.2
  sizes.lowerLegSize = 0.2
  sizes.lowerLegLength = 0.5

  // apply scale multiplier
  Object.keys(sizes).forEach(function(key) {
    sizes[key] *= M
  })

  // Lower legs
  bodyParts.lowerLeftLeg = {
    x: -sizes.shouldersDistance / 2,
    y: sizes.lowerLegLength / 2,
    w: sizes.lowerLegSize,
    h: sizes.lowerLegLength,
    mass: 0.6
  }
  bodyParts.lowerRightLeg = {
    x: sizes.shouldersDistance / 2,
    y: sizes.lowerLegLength / 2,
    w: sizes.lowerLegSize,
    h: sizes.lowerLegLength,
    mass: 0.6
  }
  // Upper legs
  bodyParts.upperLeftLeg = {
    x: -sizes.shouldersDistance / 2,
    y: bodyParts.lowerLeftLeg.y + sizes.lowerLegLength / 2 + sizes.upperLegLength / 2,
    w: sizes.upperLegSize,
    h: sizes.upperLegLength,
    mass: 0.5
  }
  bodyParts.upperRightLeg = {
    x: sizes.shouldersDistance / 2,
    y: bodyParts.lowerRightLeg.y + sizes.lowerLegLength / 2 + sizes.upperLegLength / 2,
    w: sizes.upperLegSize,
    h: sizes.upperLegLength,
    mass: 0.5
  }
  // Pelvis
  bodyParts.pelvis = {
    x: 0,
    y: bodyParts.upperLeftLeg.y + sizes.upperLegLength / 2 + sizes.pelvisLength / 2,
    w: sizes.shouldersDistance,
    h: sizes.pelvisLength,
    mass: 0.7
  }
  // Upper body
  bodyParts.upperBody = {
    x: 0,
    y: bodyParts.pelvis.y + sizes.pelvisLength / 2 + sizes.upperBodyLength / 2,
    w: sizes.shouldersDistance,
    h: sizes.upperBodyLength,
    mass: 1.0
  }
  // Head
  bodyParts.head = {
    x: 0,
    y: bodyParts.upperBody.y + sizes.upperBodyLength / 2 + sizes.headRadius + sizes.neckLength,
    w: sizes.headRadius * 2,
    h: sizes.headRadius * 2,
    mass: 0.3
  }
  // Upper arms
  bodyParts.upperLeftArm = {
    x: -sizes.shouldersDistance / 2 - sizes.upperArmLength / 2,
    y: bodyParts.upperBody.y + sizes.upperBodyLength / 2,
    w: sizes.upperArmLength,
    h: sizes.upperArmSize,
    mass: 0.4
  }
  bodyParts.upperRightArm = {
    x: sizes.shouldersDistance / 2 + sizes.upperArmLength / 2,
    y: bodyParts.upperBody.y + sizes.upperBodyLength / 2,
    w: sizes.upperArmLength,
    h: sizes.upperArmSize,
    mass: 0.4
  }
  // lower arms
  bodyParts.lowerLeftArm = {
    x: bodyParts.upperLeftArm.x - sizes.lowerArmLength / 2 - sizes.upperArmLength / 2,
    y: bodyParts.upperLeftArm.y,
    w: sizes.lowerArmLength,
    h: sizes.lowerArmSize,
    mass: 0.6
  }
  bodyParts.lowerRightArm = {
    x: bodyParts.upperRightArm.x + sizes.lowerArmLength / 2 + sizes.upperArmLength / 2,
    y: bodyParts.upperRightArm.y,
    w: sizes.lowerArmLength,
    h: sizes.lowerArmSize,
    mass: 0.6
  }
  // Neck
  bodyJoints.neckJoint = {
    a: 'head',
    b: 'upperBody',
    pivot_a: [0, -sizes.headRadius - sizes.neckLength / 2],
    pivot_b: [0, sizes.upperBodyLength / 2],
    limits: [-Math.PI/10, Math.PI/10]
  }
  // Knees
  bodyJoints.leftKneeJoint = {
    a: 'lowerLeftLeg',
    b: 'upperLeftLeg',
    pivot_a: [0, sizes.lowerLegLength / 2],
    pivot_b: [0, -sizes.upperLegLength / 2],
    limits: [-Math.PI/2, Math.PI/2]
  }
  bodyJoints.rightKneeJoint = {
    a: 'lowerRightLeg',
    b: 'upperRightLeg',
    pivot_a: [0, sizes.lowerLegLength / 2],
    pivot_b: [0, -sizes.upperLegLength / 2],
    limits: [-Math.PI/2, Math.PI/2]
  }
  // Hips
  bodyJoints.leftHipJoint = {
    a: 'upperLeftLeg',
    b: 'pelvis',
    pivot_a: [0, sizes.upperLegLength / 2],
    pivot_b: [-sizes.shouldersDistance / 2, -sizes.pelvisLength / 2],
    limits: [-Math.PI/4, Math.PI/4]
  }
  bodyJoints.rightHipJoint = {
    a: 'upperRightLeg',
    b: 'pelvis',
    pivot_a: [0, sizes.upperLegLength / 2],
    pivot_b: [sizes.shouldersDistance / 2, -sizes.pelvisLength / 2],
    limits: [-Math.PI/4, Math.PI/4]
  }
  // Spine
  bodyJoints.spineJoint = {
    a: 'pelvis',
    b: 'upperBody',
    pivot_a: [0, sizes.pelvisLength / 2],
    pivot_b: [0, -sizes.upperBodyLength / 2],
    limits: [-Math.PI/12, Math.PI/12]
  }
  // Shoulders
  bodyJoints.leftShoulder = {
    a: 'upperBody',
    b: 'upperLeftArm',
    pivot_a: [-sizes.shouldersDistance / 2, sizes.upperBodyLength / 2],
    pivot_b: [sizes.upperArmLength / 2, 0],
    limits: [-Math.PI/3, Math.PI/3]
  }
  bodyJoints.rightShoulder = {
    a: 'upperBody',
    b: 'upperRightArm',
    pivot_a: [sizes.shouldersDistance / 2, sizes.upperBodyLength / 2],
    pivot_b: [-sizes.upperArmLength / 2, 0],
    limits: [-Math.PI/3, Math.PI/3]
  }
  // Elbows
  bodyJoints.leftElbowJoint = {
    a: 'lowerLeftArm',
    b: 'upperLeftArm',
    pivot_a: [sizes.lowerArmLength / 2, 0],
    pivot_b: [-sizes.upperArmLength / 2, 0],
    limits: [-Math.PI/4, Math.PI/4]
  }
  bodyJoints.rightElbowJoint = {
    a: 'lowerRightArm',
    b: 'upperRightArm',
    pivot_a: [-sizes.lowerArmLength / 2, 0],
    pivot_b: [sizes.upperArmLength / 2, 0],
    limits: [-Math.PI/4, Math.PI/4]
  }

  //

  var ragdoll = game.add.group(null, null, 'ragdoll')

  var collisionGroup = game.physics.p2.createCollisionGroup()
  game.physics.p2.updateBoundsCollisionGroup()

  console.log(collisionGroup)

  /**
   * create muscles
   */
  Object.keys(bodyParts).forEach(function (key) {

    var x = bodyParts[key].x + offsetX
    var y = bodyParts[key].y + offsetY
    var w = bodyParts[key].w
    var h = bodyParts[key].h
    var mass = bodyParts[key].mass
    var sprite = 'whitesquare'

    var part = ragdoll.create(x, y, 'whitesquare')

    part.width = w
    part.height = h
    part.name = key

    game.physics.p2.enable(part)
    part.body.setCollisionGroup(collisionGroup)

    part.body.mass = mass

    var wallMaterial = game.physics.wallMaterial
    var partMaterial = game.physics.p2.createMaterial(key+'Material', part.body)

    var contactMaterial = game.physics.p2.createContactMaterial(partMaterial, wallMaterial)

    contactMaterial.friction = 100         // Friction to use in the contact of these two materials.
    contactMaterial.restitution = 0        // Restitution (i.e. how bouncy it is!) to use in the contact of these two materials.
    contactMaterial.stiffness = 1e7          // Stiffness of the resulting ContactEquation that this ContactMaterial generate.
    contactMaterial.relaxation = 3           // Relaxation of the resulting ContactEquation that this ContactMaterial generate.
    contactMaterial.frictionStiffness = 1e7  // Stiffness of the resulting FrictionEquation that this ContactMaterial generate.
    contactMaterial.frictionRelaxation = 100 // Relaxation of the resulting FrictionEquation that this ContactMaterial generate.
    contactMaterial.surfaceVelocity = 0      // Will add surface velocity to this material. If bodyA rests on top if bodyB, and the surface velocity is positive, bodyA will slide to the right.

    bodySprites[key] = part
  })

  /**
   * create joints
   */
  Object.keys(bodyJoints).forEach(function (key) {

    var joint = bodyJoints[key]
    
    var constraint = game.physics.p2.createRevoluteConstraint
      (
        bodySprites[joint.a], 
        joint.pivot_a, 
        bodySprites[joint.b], 
        joint.pivot_b, 
        CONSTRAINT_FORCE
      )

    constraint.setLimits(joint.limits[0], joint.limits[1])

    //constraint.collideConnected = false

    constraint.lowerLimitEquation.needsUpdate = true
    constraint.upperLimitEquation.needsUpdate = true 

    // constraint.lowerLimitEquation.multiplier = 100
    // constraint.upperLimitEquation.multiplier = 100

    constraint.lowerLimitEquation.epsilon = 1000
    constraint.upperLimitEquation.epsilon = 1000

    constraint.motorEquation.relaxation = 1
    constraint.motorEquation.stiffness = 1100000

    if(!ragdoll.joints) ragdoll.joints = {}
    ragdoll.joints[key] = constraint
  })

  /**
   * enable joint motor
   * 
   * @method flex
   * @param {String} jointName
   */
  ragdoll.flex = function (jointName) {
    var joint = this.joints[jointName]
    joint.setMotorSpeed(0)
    joint.enableMotor()
    joint.setMotorSpeed(MOTOR_FORCE)
  }

  /**
   * enable joint motor
   * 
   * @method contract
   * @param {String} jointName
   */
  ragdoll.contract = function (jointName) {
    var joint = this.joints[jointName]
    joint.setMotorSpeed(0)
    joint.enableMotor()
    joint.setMotorSpeed(-MOTOR_FORCE)
  }

  /**
   * disabling motor on all joints
   *
   * @method relaxAll
   */
  ragdoll.relaxAll = function() {
    var _this = this
    Object.keys(_this.joints).forEach(function(joint) {
      _this.relax(joint)
    })
  }

  /**
   * disable joint motor
   *
   * @method relax
   * @param {String} jointName
   */
  ragdoll.relax = function(jointName) {
    var joint = ragdoll.joints[jointName]
    joint.disableMotor()
  }

  return ragdoll
}
},{}],6:[function(require,module,exports){

var properties = require('./properties')

var states = { 
	boot: require('./states/boot.js'),
	preloader: require('./states/preloader.js'),
	mainmenu: require('./states/mainmenu.js'),
	singleplayermenu: require('./states/singleplayermenu.js'),
	multiplayermenu: require('./states/multiplayermenu.js'),
	settingsmenu: require('./states/settingsmenu.js'),
	train: require('./states/train.js'),
	quickmatch: require('./states/quickmatch.js')
}

window.onload = function() {

	var Phaser = window.Phaser // hack
	var io = window.io // hack

	var game = new Phaser.Game(properties.size.x, properties.size.y, Phaser.AUTO, 'game')

	game.state.add('boot', states.boot(game))
	game.state.add('preloader', states.preloader(game))
	game.state.add('mainmenu', states.mainmenu(game))
	game.state.add('singleplayermenu', states.singleplayermenu(game))
	game.state.add('multiplayermenu', states.multiplayermenu(game))
	game.state.add('settingsmenu', states.settingsmenu(game))
	game.state.add('train', states.train(game))
	game.state.add('quickmatch', states.quickmatch(game))

	game.state.start('boot')
}
},{"./properties":7,"./states/boot.js":8,"./states/mainmenu.js":9,"./states/multiplayermenu.js":10,"./states/preloader.js":11,"./states/quickmatch.js":12,"./states/settingsmenu.js":13,"./states/singleplayermenu.js":14,"./states/train.js":15}],7:[function(require,module,exports){
var npmProperties = require('../../../package.json')

module.exports = { 

  title: 'Phaser JS Boilerplate',

  description: npmProperties.description,

  port: 3017,

  liveReloadPort: 3018,

  showStats: true,

  size: { 
    x: 800,
    y: 600
  }, 
  
  analyticsId: ''
}

},{"../../../package.json":1}],8:[function(require,module,exports){
var Stats = require('Stats')
  , properties = require('../properties')

module.exports = function(game) {

  // FPS counter
  function addStats() {
    var stats = new Stats()
    stats.setMode(0)
    stats.domElement.style.position = 'absolute'
    stats.domElement.style.left = '0px'
    stats.domElement.style.top = '0px'
    document.body.appendChild(stats.domElement)
    setInterval(function () {
      stats.begin()
      stats.end()
    }, 1000 / 60)
  }

  var gameState = {}

  gameState.preload = function () {
    game.stage.disableVisibilityChange = true
  }

  gameState.create = function () {

    if (properties.showStats) addStats()

    game.scale.pageAlignHorizontally = true
    game.scale.pageAlignVertically = true
    game.scale.refresh()

    game.state.start('preloader')
  }

  return gameState
}

},{"../properties":7,"Stats":16}],9:[function(require,module,exports){
var Button = require('../Button.js')

module.exports = function(game) {

  var gameState = {}

  gameState.preload = function () {
    game.stage.disableVisibilityChange = true
  }

  gameState.create = function () {

    var logo = game.add.sprite(game.world.centerX, 200, 'logo')
    logo.anchor.setTo(0.5, 0.5)

    var a = new Button(game, { x: game.world.centerX, y: 450, text: 'single player' },
    function () {
      game.state.start('singleplayermenu')
    })

    var b = new Button(game, { x: game.world.centerX, y: 500, text: 'multi player' },
    function () {
      game.state.start('multiplayermenu')
    })

    var c = new Button(game, { x: game.world.centerX, y: 550, text: 'settings' },
    function () {
      game.state.start('settingsmenu')
    })
  }

  gameState.update = function() {
  	
  }

  return gameState
}

},{"../Button.js":3}],10:[function(require,module,exports){
var Button = require('../Button.js')

module.exports = function(game) {

  var gameState = {}

  gameState.preload = function () {
    game.stage.disableVisibilityChange = true
  }

  gameState.create = function () {

    var backButton = new Button(game, { x: 100, y: 50, text: 'back' },
    function () {
      game.state.start('mainmenu')
    })

    var trainButton = new Button(game, { x: game.world.centerX, y: 300, text: 'quickmatch' },
    function () {
      game.state.start('quickmatch')
    })

  }

  return gameState
}
},{"../Button.js":3}],11:[function(require,module,exports){
module.exports = function(game) {

  var gameState = {}

  gameState.preload = function () {
    game.stage.disableVisibilityChange = true

    game.load.image('logo', 'images/phaser.png#grunt-cache-bust')
    game.load.image('redsquare', 'images/redsquare.png#grunt-cache-bust')
    game.load.image('bluesquare', 'images/bluesquare.jpg#grunt-cache-bust')
    game.load.image('whitesquare', 'images/whitesquare.png#grunt-cache-bust')
  }

  gameState.create = function () {
    game.state.start('mainmenu')
  }

  return gameState
}

},{}],12:[function(require,module,exports){
var Player = require('../Player.js')
var Arena = require('../Arena.js')
var Button = require('../Button.js')

var socket

module.exports = function(game) {

  var gameState = {}

  var p1, p2, isP1, isP2

  var id

  var players = []

  var frameCount = 0
  var newTurn = false
  var hasPlayedBack = false
  var isSpacebarLocked = false

  var currentWarning

  var arena

  gameState.preload = function () {
    game.stage.disableVisibilityChange = true
  }

  gameState.create = function () {

    socket = io('http://localhost:9000')

    arena = new Arena(game)
    arena.createPlayers()
    arena.newTurn()

    p1 = arena.players['p1']
    p2 = arena.players['p2']

    var backButton = new Button(game, { x: 100, y: 50, text: 'back' },
    function () {
      game.state.start('multiplayermenu')
    })

    function warning (message) {
      if(!currentWarning) {
        currentWarning = game.add.text(game.world.centerX, 150, message, { font: '30px Arial', fill: '#ffffff', align: 'center' } )
        currentWarning.anchor.setTo(0.5, 0.5)
      }
      currentWarning._text = message
      window.setTimeout(function () { 
        game.add.tween(currentWarning).to( {alpha: 0}, 1000, Phaser.Easing.Linear.None, true)
      }, 1000)
    }

    //

    socket.emit('join-lobby')

    socket.on('id', function(socketId) {
      console.log('id', socketId)
      id = socketId
      warning('you are ' + id)
    })

    // could recycle text objects
    socket.on('players-list', function (playerList) {
      players.forEach(function (p) { p.destroy() })
      players = playerList.map(function(player, i) {
        return game.add.text(550, 20*(i+1), player, {fill: '#ffffff', font: '16px Arial'})
      })
    })

    socket.on('new-game', function (players) {
      warning('game starting...')
      console.log('new-game', players)

      if(players.p1 === id) {
        isP1 = true
        p1.setController('me')
        warning('you are p1')
      } else {
        isP2 = false
        p1.setController('network')
      }

      if(players.p2 === id) {
        isP2 = true
        p2.setController('me')
        warning('you are p2')
      } else {
        isP2 = false
        p2.setController('network')
      }

      arena.resetPlayers()
      arena.newTurn()

      socket.on('turn', function (turn) {
        frameCount = 0
        p1.setLastTurn(turn.p1)
        p2.setLastTurn(turn.p2)
        p1.loadPosition()
        p2.loadPosition()
        newTurn = true
        isSpacebarLocked = false
      })
    })

    socket.on('game-over', function () {
      warning('game over')
      arena.resetPlayers()
      arena.newTurn()
    })

    // debug
    window.socket = socket
    window.game = game
    window.p1 = p1
    window.p2 = p2

  }

  gameState.update = function () {

    if(p1 && p2) {

      frameCount++

      if(p1.resetPlayback() || p2.resetPlayback()) {
        arena.sameTurn()
        frameCount = 0
      }

      if(frameCount === 1 && newTurn === true) {
        arena.cinematicPlayback()
        hasPlayedBack = true
      }

      if(frameCount === 100) {
        frameCount = 0
        
        if(newTurn === true && hasPlayedBack === true) {
          arena.newTurn()
          newTurn = false
          hasPlayedBack = false
        } else {
          arena.sameTurn()
        }
      }

      if(game.input.keyboard.justPressed(Phaser.Keyboard.SPACEBAR)) {
        if(isP1 || isP2) {
          if(!isSpacebarLocked) {
            var p = isP1 ? p1 : p2
            socket.emit('action', p.getLastTurn())
            isSpacebarLocked = true
          }
        }
      }
    }
  }

  gameState.shutdown = function () {
    socket.emit('leave-lobby')
    arena.destroy()
  }

  return gameState
}
},{"../Arena.js":2,"../Button.js":3,"../Player.js":4}],13:[function(require,module,exports){
var Button = require('../Button.js')

module.exports = function(game) {

  var gameState = {}

  gameState.preload = function () {
    game.stage.disableVisibilityChange = true
  }

  gameState.create = function () {
    var backButton = new Button(game, { x: 100, y: 50, text: 'back' },
    function () {
      game.state.start('mainmenu')
    })
  }

  return gameState
}
},{"../Button.js":3}],14:[function(require,module,exports){
module.exports = function(game) {

  var gameState = {}

  gameState.preload = function () {
    game.stage.disableVisibilityChange = true
  }

  gameState.create = function () {

  	var style = { font: '40px Arial', fill: '#ffffff', align: 'center'}
  	var mainMenuButton = game.add.text(100, 50, 'back', style)
    mainMenuButton.anchor.setTo(0.5, 0.5)
    mainMenuButton.inputEnabled = true
    mainMenuButton.events.onInputDown.add(function() {
			game.state.start('mainmenu')
    })

  	var train = game.add.text(game.world.centerX, 300, 'train', style)
    train.anchor.setTo(0.5, 0.5)
    train.inputEnabled = true
    train.events.onInputDown.add(function() {
			game.state.start('train')
    })
  }

  return gameState
}

},{}],15:[function(require,module,exports){
var Player = require('../Player.js')
var Arena = require('../Arena.js')
var Button = require('../Button.js')

module.exports = function(game) {

  var gameState = {}

  var arena

  gameState.preload = function () {
    game.stage.disableVisibilityChange = true
  }

  gameState.create = function () {

    // back button
    var backButton = new Button(game, { x: 100, y: 50, text: 'back' },
    function () {
      game.state.start('singleplayermenu')
    })

    arena = new Arena(game)
    arena.createPlayers()
    arena.setControllers('me', 'dummy')
    arena.newTurn()
  }

  var frameCount = 0
  var newTurn = false
  var hasPlayedBack = false

  gameState.update = function () {

    frameCount++

    if(arena.players['p1'].resetPlayback() || arena.players['p2'].resetPlayback()) {
      frameCount = 0
      arena.sameTurn()
    }

    if(frameCount === 1 && newTurn === true) {
      arena.cinematicPlayback()
      hasPlayedBack = true
    }

    if(frameCount === 100) {
      frameCount = 0

      if(newTurn === true && hasPlayedBack === true) {
        arena.newTurn()
        newTurn = false
        hasPlayedBack = false
      } else {
        arena.sameTurn()
      }
    }

    if(game.input.keyboard.justPressed(Phaser.Keyboard.SPACEBAR)) {
      newTurn = true
    }
  }

  gameState.shutdown = function () {
    arena.destroy()
  }

  return gameState
}
},{"../Arena.js":2,"../Button.js":3,"../Player.js":4}],16:[function(require,module,exports){
(function (global){
;__browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
// stats.js - http://github.com/mrdoob/stats.js
var Stats=function(){var l=Date.now(),m=l,g=0,n=Infinity,o=0,h=0,p=Infinity,q=0,r=0,s=0,f=document.createElement("div");f.id="stats";f.addEventListener("mousedown",function(b){b.preventDefault();t(++s%2)},!1);f.style.cssText="width:80px;opacity:0.9;cursor:pointer";var a=document.createElement("div");a.id="fps";a.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#002";f.appendChild(a);var i=document.createElement("div");i.id="fpsText";i.style.cssText="color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
i.innerHTML="FPS";a.appendChild(i);var c=document.createElement("div");c.id="fpsGraph";c.style.cssText="position:relative;width:74px;height:30px;background-color:#0ff";for(a.appendChild(c);74>c.children.length;){var j=document.createElement("span");j.style.cssText="width:1px;height:30px;float:left;background-color:#113";c.appendChild(j)}var d=document.createElement("div");d.id="ms";d.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";f.appendChild(d);var k=document.createElement("div");
k.id="msText";k.style.cssText="color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";k.innerHTML="MS";d.appendChild(k);var e=document.createElement("div");e.id="msGraph";e.style.cssText="position:relative;width:74px;height:30px;background-color:#0f0";for(d.appendChild(e);74>e.children.length;)j=document.createElement("span"),j.style.cssText="width:1px;height:30px;float:left;background-color:#131",e.appendChild(j);var t=function(b){s=b;switch(s){case 0:a.style.display=
"block";d.style.display="none";break;case 1:a.style.display="none",d.style.display="block"}};return{REVISION:11,domElement:f,setMode:t,begin:function(){l=Date.now()},end:function(){var b=Date.now();g=b-l;n=Math.min(n,g);o=Math.max(o,g);k.textContent=g+" MS ("+n+"-"+o+")";var a=Math.min(30,30-30*(g/200));e.appendChild(e.firstChild).style.height=a+"px";r++;b>m+1E3&&(h=Math.round(1E3*r/(b-m)),p=Math.min(p,h),q=Math.max(q,h),i.textContent=h+" FPS ("+p+"-"+q+")",a=Math.min(30,30-30*(h/100)),c.appendChild(c.firstChild).style.height=
a+"px",m=b,r=0);return b},update:function(){l=this.end()}}};
; browserify_shim__define__module__export__(typeof Stats != "undefined" ? Stats : window.Stats);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[6])
//# sourceMappingURL=data:application/json;base64,
