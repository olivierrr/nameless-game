(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "name": "nameless-game",
  "version": "0.1.0",
  "description": "nameless",
  "main": "build/js/app.min.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:olivierrr/nameless-game.git"
  },
  "author": "olivierrr",
  "license": "MIT",
  "browser": {
    "lodash": "./node_modules/lodash/dist/lodash.compat.js",
    "Stats": "./src/js/lib/stats.min.js"
  },
  "browserify-shim": {
    "lodash": {
      "exports": "_"
    },
    "Stats": {
      "exports": "Stats"
    }
  },
  "devDependencies": {
    "browserify": "^4.1.5",
    "browserify-shim": "^3.5.0",
    "grunt": "^0.4.5",
    "grunt-browserify": "^2.1.0",
    "grunt-cache-bust": "^0.3.6",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-connect": "^0.7.1",
    "grunt-contrib-copy": "^0.5.0",
    "grunt-contrib-jade": "^0.11.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-stylus": "^0.16.0",
    "grunt-contrib-uglify": "^0.4.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-open": "^0.2.3",
    "grunt-pngmin": "^0.6.1"
  },
  "dependencies": {
    "grunt-contrib-compress": "^0.9.1",
    "lodash": "^2.4.1",
    "phaser": "^2.1.1"
  }
}

},{}],2:[function(require,module,exports){
var Ragdoll = require('./Ragdoll.js')

/*
 * Player class
 *
 * @extends Ragdoll
 * @constructor Player
 */
var Player = function (controller, game, x, y) {

  /**
   * available controllers: 
   *  'me'      - controlled by users input
   *  'dummy'   - no conroller
   *  'network' - controller over network
   *
   * @property {String} controller
   * @default 'dummy'
   */
  this.controller = controller || 'dummy'

	/**
	 * @reference {Phaser.game} game
	 */
	this.game = game

	/**
 	 * @Object {Phaser.group} ragdoll
	 */
	this.ragdoll = Ragdoll(game, x, y)

	/**
	 * @property {Boolean} isReady
	 */
	this.isReady = false

	/** 
   * @property {Boolen} isAllowingInput
   */
  this.isAllowingInput = true

  /**
   * a turn is an Array of actions
   * an 'action' is a joint event - ex: {jointName:'neck', type:'relax'}
   *
   * @property {Array} turnHistory
   */
  this.turnHistory = []

  /**
   * @property {Array} currentPosition
   */
  this.currentPosition = []

  /**
   * @property {Number} health
   */
  this.health = 100

  //TEST
  this.isResetingPlayback = false

  if(controller === 'dummy') {
    this.isAllowingInput = false
    this.isReady = true
  }
  if(controller === 'network') {
    this.isAllowingInput = false
  }
  if(controller === 'me') {

  }
}

/**
 * pushes an empty turn Object to turnHistory
 * ragdoll.newAction will push moves to newly pushed Object
 *
 * @method newTurn
 */
Player.prototype.newTurn = function () {
  this.turnHistory.push({})

  // this shouldn't be here
  this.ragdoll.children.forEach(function (part) {
    part.loadTexture('whitesquare')
  })

  this.isReady = false
}

/**
 * register a new move to latest turn on turnHistory
 *
 * @method newAction
 * @param {Object} move
 */
Player.prototype.newAction = function (move) {
  this.turnHistory[this.turnHistory.length-1][move.jointName] = move.type
}

/**
 * save current position and velocity
 * 
 * @method savePosition
*/
Player.prototype.savePosition = function () {

  this.currentPosition = this.ragdoll.children.map( function (part) {
    var data = part.body.data
    return {
      x: data.position[0], 
      y: data.position[1],
      vx: data.velocity[0],
      vy: data.velocity[1],
      angle: data.angle,
      angularVelocity: data.angularVelocity
    }
  })
}

/**
 * move ragdoll to last position on postision history
 * 
 * @method loadPosition
 */
Player.prototype.loadPosition = function () {

  var pos = this.currentPosition
  this.ragdoll.children.forEach(function(part, i) {
    var data = part.body.data
    data.position[0] = pos[i].x
    data.position[1] = pos[i].y
    data.angle = pos[i].angle,
    data.angularVelocity = pos[i].angularVelocity,
    data.velocity[0] = pos[i].vx,
    data.velocity[1] = pos[i].vy
  })
}

/**
 * create shallow copy of ragdoll with no physics
 *
 * @method clone
 * @return {Phaser.Group} a copy of ragdoll
*/
Player.prototype.clone = function () {
  var ragdollClone = this.game.add.group()

  var parts = this.ragdoll.children.forEach(function(part) {
    var clone = ragdollClone.create(part.position.x, part.position.y, part.key)
    clone.width = part.width
    clone.height = part.height
    clone.rotation = part.rotation
    clone.anchor.x = part.anchor.x
    clone.anchor.y = part.anchor.y
    clone.name = part.name
  })
  return ragdollClone
}

/**
 * singleton clone
 *
 * @method shadow
 */
Player.prototype.shadow = function () {

  if(this.shadowClone) this.shadowClone.destroy(true)

  this.shadowClone = this.clone()
  
  // TODO
  if(this.isAllowingInput) attachEvents(this.shadowClone, this)
}

/**
 * move ragdoll
 *
 * @method executeMove
 * @param {String} jointName
 * @param {String} type
 */
Player.prototype.executeMove = function (jointName, type) {
  switch (type) {
    case 'expand'  : this.ragdoll.flex(jointName)     ;break 
    case 'contract': this.ragdoll.contract(jointName) ;break 
    case 'relax'   : this.ragdoll.relax(jointName)    ;break 
    case 'tense'   : this.ragdoll.tense(jointName)    ;break 
  }
}

/**
 * a turn is an array of moves
 *
 * @method executeMoves
 * @param {Array} turn
 */
Player.prototype.executeMoves = function (turn, alpha) {
  var _this = this

  _this.ragdoll.alpha = alpha || 1 

  Object.keys(turn).forEach(function (jointName) {
    _this.executeMove(jointName, turn[jointName])
  })
}

/**
 * -todo
 */
Player.prototype.replayLastMove = function (turn) {

  this.shadowClone.destroy()

  this.executeMove(turn, 1)
}

//// TODO ////

// TEMP - TODO
function attachEvents (ragdoll, ctx) {
	ragdoll.children.forEach(function(part){
    part.inputEnabled = true
    part.events.onInputDown.add(function(e) {
      muscleClick.call(ctx, e.name)
    })
  })
}

// TEMP - TODO
function muscleClick (muscleName) {

  joint = {
    'head'         : 'neckJoint',
    'upperLeftArm' : 'leftShoulder',
    'lowerLeftArm' : 'leftElbowJoint',
    'upperRightArm': 'rightShoulder',
    'lowerRightArm': 'rightElbowJoint',
    'upperLeftLeg' : 'leftHipJoint',   
    'lowerLeftLeg' : 'leftKneeJoint',  
    'upperRightLeg': 'rightHipJoint', 
    'lowerRightLeg': 'rightKneeJoint', 
    'pelvis'       : 'spineJoint',     
    'upperBody'    : 'spineJoint'
  }

  var jointName = joint[muscleName]
  var jointState = this.turnHistory[this.turnHistory.length-1][jointName]
  var action

  if(jointState === 'expand') action = 'contract'
  else if(jointState === 'contract') action = 'relax'
  else if(jointState === 'relax') action = 'expand'
  else action = 'expand'

  console.log(action, jointName)

  this.newAction({
  	jointName: jointName, 
  	type: action
  })

  textures = {
    'expand'  : 'redsquare',
    'contract': 'bluesquare',
    'relax'   : 'whitesquare'
  }

  this.shadowClone.children.filter(function (part) {
    return part.name === muscleName
  })[0].loadTexture(textures[action])

  this.isResetingPlayback = true
}

Player.prototype.resetPlayback = function () {
  if(this.isResetingPlayback === true) {
    this.isResetingPlayback = false
    return true
  }
  else return false
}

Player.prototype.ready = function(first_argument) {
  if(this.isReady === true) {
    this.isReady = false
    return true
  }
  else return false
}

// -todo
Player.prototype.method0 = function () {
  this.newTurn()
  this.savePosition()
  this.shadow()
}
// -todo
Player.prototype.method1 = function () {
	this.ragdoll.relaxAll()
  this.newTurn()
  this.savePosition()
  this.shadow()
}
// -todo
Player.prototype.method2 = function () {
	this.loadPosition()
  this.ragdoll.relaxAll()
  this.executeMoves(this.turnHistory[this.turnHistory.length-1], 0.5)
}


module.exports = Player
},{"./Ragdoll.js":3}],3:[function(require,module,exports){
module.exports = function(game, offsetX, offsetY) {

  var FORCE = 10000
  var M = 100 // scale

  var bodySprites = {}
  var bodyJoints = {}
  var bodyParts = {}

  // normalized scales
  var sizes = {}
  sizes.shouldersDistance = 0.4
  sizes.upperArmLength = 0.5
  sizes.lowerArmLength = 0.5
  sizes.upperArmSize = 0.2
  sizes.lowerArmSize = 0.2
  sizes.neckLength = 0.1
  sizes.headRadius = 0.15
  sizes.upperBodyLength = 0.6
  sizes.pelvisLength = 0.4
  sizes.upperLegLength = 0.6
  sizes.upperLegSize = 0.2
  sizes.lowerLegSize = 0.2
  sizes.lowerLegLength = 0.5

  // apply scale multiplier
  Object.keys(sizes).forEach(function(key) {
    sizes[key] *= M
  })

  // Lower legs
  bodyParts.lowerLeftLeg = {
    x: -sizes.shouldersDistance / 2,
    y: sizes.lowerLegLength / 2,
    w: sizes.lowerLegSize,
    h: sizes.lowerLegLength,
    mass: 0.2
  }
  bodyParts.lowerRightLeg = {
    x: sizes.shouldersDistance / 2,
    y: sizes.lowerLegLength / 2,
    w: sizes.lowerLegSize,
    h: sizes.lowerLegLength,
    mass: 0.2
  }
  // Upper legs
  bodyParts.upperLeftLeg = {
    x: -sizes.shouldersDistance / 2,
    y: bodyParts.lowerLeftLeg.y + sizes.lowerLegLength / 2 + sizes.upperLegLength / 2,
    w: sizes.upperLegSize,
    h: sizes.upperLegLength,
    mass: 1
  }
  bodyParts.upperRightLeg = {
    x: sizes.shouldersDistance / 2,
    y: bodyParts.lowerRightLeg.y + sizes.lowerLegLength / 2 + sizes.upperLegLength / 2,
    w: sizes.upperLegSize,
    h: sizes.upperLegLength,
    mass: 1
  }
  // Pelvis
  bodyParts.pelvis = {
    x: 0,
    y: bodyParts.upperLeftLeg.y + sizes.upperLegLength / 2 + sizes.pelvisLength / 2,
    w: sizes.shouldersDistance,
    h: sizes.pelvisLength,
    mass: 1
  }
  // Upper body
  bodyParts.upperBody = {
    x: 0,
    y: bodyParts.pelvis.y + sizes.pelvisLength / 2 + sizes.upperBodyLength / 2,
    w: sizes.shouldersDistance,
    h: sizes.upperBodyLength,
    mass: 1
  }
  // Head
  bodyParts.head = {
    x: 0,
    y: bodyParts.upperBody.y + sizes.upperBodyLength / 2 + sizes.headRadius + sizes.neckLength,
    w: sizes.headRadius * 2,
    h: sizes.headRadius * 2,
    mass: 1
  }
  // Upper arms
  bodyParts.upperLeftArm = {
    x: -sizes.shouldersDistance / 2 - sizes.upperArmLength / 2,
    y: bodyParts.upperBody.y + sizes.upperBodyLength / 2,
    w: sizes.upperArmLength,
    h: sizes.upperArmSize,
    mass: 1
  }
  bodyParts.upperRightArm = {
    x: sizes.shouldersDistance / 2 + sizes.upperArmLength / 2,
    y: bodyParts.upperBody.y + sizes.upperBodyLength / 2,
    w: sizes.upperArmLength,
    h: sizes.upperArmSize,
    mass: 1
  }
  // lower arms
  bodyParts.lowerLeftArm = {
    x: bodyParts.upperLeftArm.x - sizes.lowerArmLength / 2 - sizes.upperArmLength / 2,
    y: bodyParts.upperLeftArm.y,
    w: sizes.lowerArmLength,
    h: sizes.lowerArmSize,
    mass: 1
  }
  bodyParts.lowerRightArm = {
    x: bodyParts.upperRightArm.x + sizes.lowerArmLength / 2 + sizes.upperArmLength / 2,
    y: bodyParts.upperRightArm.y,
    w: sizes.lowerArmLength,
    h: sizes.lowerArmSize,
    mass: 1
  }
  // Neck
  bodyJoints.neckJoint = {
    a: 'head',
    b: 'upperBody',
    pivot_a: [0, -sizes.headRadius - sizes.neckLength / 2],
    pivot_b: [0, sizes.upperBodyLength / 2],
    limits: [-Math.PI/12, Math.PI/12]
  }
  // Knees
  bodyJoints.leftKneeJoint = {
    a: 'lowerLeftLeg',
    b: 'upperLeftLeg',
    pivot_a: [0, sizes.lowerLegLength / 2],
    pivot_b: [0, -sizes.upperLegLength / 2],
    limits: [-Math.PI/5, Math.PI/5]
  }
  bodyJoints.rightKneeJoint = {
    a: 'lowerRightLeg',
    b: 'upperRightLeg',
    pivot_a: [0, sizes.lowerLegLength / 2],
    pivot_b: [0, -sizes.upperLegLength / 2],
    limits: [-Math.PI/5, Math.PI/5]
  }
  // Hips
  bodyJoints.leftHipJoint = {
    a: 'upperLeftLeg',
    b: 'pelvis',
    pivot_a: [0, sizes.upperLegLength / 2],
    pivot_b: [-sizes.shouldersDistance / 2, -sizes.pelvisLength / 2],
    limits: [-Math.PI/6, Math.PI/4]
  }
  bodyJoints.rightHipJoint = {
    a: 'upperRightLeg',
    b: 'pelvis',
    pivot_a: [0, sizes.upperLegLength / 2],
    pivot_b: [sizes.shouldersDistance / 2, -sizes.pelvisLength / 2],
    limits: [-Math.PI/4, Math.PI/6]
  }
    // Spine
  bodyJoints.spineJoint = {
    a: 'pelvis',
    b: 'upperBody',
    pivot_a: [0, sizes.pelvisLength / 2],
    pivot_b: [0, -sizes.upperBodyLength / 2],
    limits: [-Math.PI/5, Math.PI/5]
  }
    // Shoulders
  bodyJoints.leftShoulder = {
    a: 'upperBody',
    b: 'upperLeftArm',
    pivot_a: [-sizes.shouldersDistance / 2, sizes.upperBodyLength / 2],
    pivot_b: [sizes.upperArmLength / 2, 0],
    limits: [-Math.PI/2, Math.PI/2]
  }
  bodyJoints.rightShoulder = {
    a: 'upperBody',
    b: 'upperRightArm',
    pivot_a: [sizes.shouldersDistance / 2, sizes.upperBodyLength / 2],
    pivot_b: [-sizes.upperArmLength / 2, 0],
    limits: [-Math.PI/2, Math.PI/2]
  }
    // Elbows
  bodyJoints.leftElbowJoint = {
    a: 'lowerLeftArm',
    b: 'upperLeftArm',
    pivot_a: [sizes.lowerArmLength / 2, 0],
    pivot_b: [-sizes.upperArmLength / 2, 0],
    limits: [-Math.PI/4, Math.PI/4]
  }
  bodyJoints.rightElbowJoint = {
    a: 'lowerRightArm',
    b: 'upperRightArm',
    pivot_a: [-sizes.lowerArmLength / 2, 0],
    pivot_b: [sizes.upperArmLength / 2, 0],
    limits: [-Math.PI/4, Math.PI/4]
  }

  //

  var ragdoll = game.add.group(null, null, 'ragdoll')

  /**
   * create muscles
   */
  Object.keys(bodyParts).forEach(function(key) {

    var x = bodyParts[key].x + offsetX
    var y = bodyParts[key].y + offsetY
    var w = bodyParts[key].w
    var h = bodyParts[key].h

    var part = ragdoll.create(x, y, 'whitesquare')

    part.width = w
    part.height = h

    part.name = key

    game.physics.p2.enable(part)

    bodySprites[key] = part
  })

  /**
   * create joints
   */
  Object.keys(bodyJoints).forEach(function(key) {

    var joint = bodyJoints[key]
    
    var constraint = game.physics.p2.createRevoluteConstraint
      (
        bodySprites[joint.a], 
        joint.pivot_a, 
        bodySprites[joint.b], 
        joint.pivot_b, 
        FORCE
      )

    constraint.setLimits(joint.limits[0], joint.limits[1])
    constraint.collideConnected = false

    if(!ragdoll.joints) ragdoll.joints = {}
    ragdoll.joints[key] = constraint
  })

  /**
   * enable joint motor
   * 
   * @method flex
   * @param {String} jointName
   */
  ragdoll.flex = function (jointName) {
    var joint = this.joints[jointName]
    joint.enableMotor()
    joint.setMotorSpeed(3)
  }

  /**
   * enable joint motor
   * 
   * @method contract
   * @param {String} jointName
   */
  ragdoll.contract = function (jointName) {
    var joint = this.joints[jointName]
    joint.enableMotor()
    joint.setMotorSpeed(-3)
  }

  /**
   * disabling motor on all joints
   *
   * @method relaxAll
   */
  ragdoll.relaxAll = function() {
    var _this = this
    Object.keys(_this.joints).forEach(function(joint) {
      _this.relax(joint)
    })
  }

  /**
   * disable joint motor
   *
   * @method relax
   * @param {String} jointName
   */
  ragdoll.relax = function(jointName) {
    var joint = ragdoll.joints[jointName]
    joint.disableMotor()
  }

  return ragdoll
}
},{}],4:[function(require,module,exports){

var properties = require('./properties')

var states = { 
	boot: require('./states/boot.js'),
	preloader: require('./states/preloader.js'),
	mainmenu: require('./states/mainmenu.js'),
	singleplayermenu: require('./states/singleplayermenu.js'),
	multiplayermenu: require('./states/multiplayermenu.js'),
	settingsmenu: require('./states/settingsmenu.js'),
	train: require('./states/train.js'),
	quickmatch: require('./states/quickmatch.js')
}

window.onload = function() {

	var Phaser = window.Phaser // hack
	var io = window.io // hack

	var game = new Phaser.Game(properties.size.x, properties.size.y, Phaser.AUTO, 'game')

	game.state.add('boot', states.boot(game))
	game.state.add('preloader', states.preloader(game))
	game.state.add('mainmenu', states.mainmenu(game))
	game.state.add('singleplayermenu', states.singleplayermenu(game))
	game.state.add('multiplayermenu', states.multiplayermenu(game))
	game.state.add('settingsmenu', states.settingsmenu(game))
	game.state.add('train', states.train(game))
	game.state.add('quickmatch', states.quickmatch(game))

	game.state.start('boot')
}
},{"./properties":5,"./states/boot.js":6,"./states/mainmenu.js":7,"./states/multiplayermenu.js":8,"./states/preloader.js":9,"./states/quickmatch.js":10,"./states/settingsmenu.js":11,"./states/singleplayermenu.js":12,"./states/train.js":13}],5:[function(require,module,exports){
var npmProperties = require('../../../package.json')

module.exports = { 

  title: 'Phaser JS Boilerplate',

  description: npmProperties.description,

  port: 3017,

  liveReloadPort: 3018,

  showStats: true,

  size: { 
    x: 800,
    y: 600
  }, 
  
  analyticsId: ''
}

},{"../../../package.json":1}],6:[function(require,module,exports){
var Stats = require('Stats')
  , properties = require('../properties')

module.exports = function(game) {

  // FPS counter
  function addStats() {
    var stats = new Stats()
    stats.setMode(0)
    stats.domElement.style.position = 'absolute'
    stats.domElement.style.left = '0px'
    stats.domElement.style.top = '0px'
    document.body.appendChild(stats.domElement)
    setInterval(function () {
      stats.begin()
      stats.end()
    }, 1000 / 60)
  }

  var boot = {}

  boot.create = function () {

    if (properties.showStats) addStats()

    game.scale.pageAlignHorizontally = true
    game.scale.pageAlignVertically = true
    game.scale.refresh()

    game.state.start('preloader')
  }

  return boot
}

},{"../properties":5,"Stats":14}],7:[function(require,module,exports){
module.exports = function(game) {

  var gameState = {}

  gameState.create = function () {

    var logo = game.add.sprite(game.world.centerX, 200, 'logo')
    logo.anchor.setTo(0.5, 0.5)

    var style = { font: '40px Arial', fill: '#ffffff', align: 'center'}

    var singlePlayerButton = game.add.text(game.world.centerX, 450, 'single player', style)
    singlePlayerButton.anchor.setTo(0.5, 0.5)
    singlePlayerButton.inputEnabled = true
    singlePlayerButton.events.onInputDown.add(function() {
			game.state.start('singleplayermenu')
    })

    var multiPlayerButton = game.add.text(game.world.centerX, 500, 'multi player', style)
    multiPlayerButton.anchor.setTo(0.5, 0.5)
    multiPlayerButton.inputEnabled = true
    multiPlayerButton.events.onInputDown.add(function() {
			game.state.start('multiplayermenu')
    })

    var settingsButton = game.add.text(game.world.centerX, 550, 'settings', style)
    settingsButton.anchor.setTo(0.5, 0.5)
    settingsButton.inputEnabled = true
    settingsButton.events.onInputDown.add(function() {
    	game.state.start('settingsmenu')
    })

  }

  gameState.update = function() {
  	
  }

  return gameState
}

},{}],8:[function(require,module,exports){
module.exports = function(game) {

  var gameState = {}

  gameState.create = function () {

  	var style = { font: '40px Arial', fill: '#ffffff', align: 'center'}
  	var mainMenuButton = game.add.text(100, 50, 'back', style)
    mainMenuButton.anchor.setTo(0.5, 0.5)
    mainMenuButton.inputEnabled = true
    mainMenuButton.events.onInputDown.add(function() {
			game.state.start('mainmenu')
    })

    var train = game.add.text(game.world.centerX, 300, 'quickmatch', style)
    train.anchor.setTo(0.5, 0.5)
    train.inputEnabled = true
    train.events.onInputDown.add(function() {
      game.state.start('quickmatch')
    })

  }

  return gameState
}
},{}],9:[function(require,module,exports){
module.exports = function(game) {

  var preloader = {}

  preloader.preload = function () {
    game.load.image('logo', 'images/phaser.png#grunt-cache-bust')
    game.load.image('redsquare', 'images/redsquare.png#grunt-cache-bust')
    game.load.image('bluesquare', 'images/bluesquare.jpg#grunt-cache-bust')
    game.load.image('whitesquare', 'images/whitesquare.png#grunt-cache-bust')
  }

  preloader.create = function () {
    game.state.start('mainmenu')
  }

  return preloader
}

},{}],10:[function(require,module,exports){
var Player = require('../Player.js')

var socket

module.exports = function(game) {

  var gameState = {}

  var p1, p2, isP1, isP2

  var isPlaying = false

  var id

  gameState.create = function () {

    socket = window.socket = io('http://localhost:9000')

  	var style = { font: '40px Arial', fill: '#ffffff', align: 'center'}
  	var mainMenuButton = game.add.text(100, 50, 'back', style)
    mainMenuButton.anchor.setTo(0.5, 0.5)
    mainMenuButton.inputEnabled = true
    mainMenuButton.events.onInputDown.add(function() {
      socket.emit('leave-lobby')
			game.state.start('multiplayermenu')

      if(p1&&p2) {
        p1.ragdoll.destroy()
        p2.ragdoll.destroy()
        p1 = null
        p2 = null
      }
    })

    socket.emit('join-lobby')
    socket.on('id', function(socketId) {
      console.log('id', socketId)
      id = id
    })

    game.physics.startSystem(Phaser.Physics.P2JS)
    game.physics.p2.gravity.y = 200

    socket.on('players-list', function (playerList) {
      console.log(playerList)
      playerList.forEach(function(player, i) {
        game.add.text(550, 20*(i+1), player, {fill: '#ffffff', font: '16px Arial'})
      })
    })

    socket.on('new-game', function (players) {

      isP1 = false
      isP2 = false

      if(p1 || p2) {
        p1.ragdoll.destroy()
        p1 = null
        p2.ragdoll.destroy()
        p2 = null
      }

      if(id === players.p1 || id === players.p2) {

        if(players.p1 === id) {
          isP1 = true
          p1 = new Player('me', game, 200, 200)
          p1.method0()
        } else {
          p1 = new Player('network', game, 200, 200)
        }

        if(players.p2 === id) {
          isP2 = true
          p2 = new Player('me', game, 600, 200)
          p2.method0()
        } else {
          p2 = new Player('network', game, 600, 200)
        }
      }

      console.log(players)
      var p1id = players.p1
      var p2id = players.p2

      socket.on('turn', function (turn) {
        p2.turnHistory.push(turn)
        console.log(turn)
      })
    })

    game.physics.startSystem(Phaser.Physics.P2JS)
    game.physics.p2.gravity.y = 200
    
    // debug
    window.game = game
    window.p1 = p1
    window.p2 = p2

  }

  var frameCount = 0
  var newTurn = false

  gameState.update = function () {

    if(p1 && p2) {

      frameCount++

      if(p1.resetPlayback() || p2.resetPlayback()) {
        p1.method2()
        p2.method2()
        frameCount = 0
      }

      if(frameCount === 100) {
        frameCount = 0

        if(p1.ready() && p2.ready()) {
          p1.method1()
          p2.method1()
        } else {
          p1.method2()
          p2.method2()
        }
      }

      if(game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
        p1.isReady = true
        p2.isReady = true
      }
    }
  }

  return gameState
}
},{"../Player.js":2}],11:[function(require,module,exports){
module.exports = function(game) {

  var gameState = {}

  gameState.create = function () {
  	
  	var style = { font: '40px Arial', fill: '#ffffff', align: 'center'}
  	var mainMenuButton = game.add.text(100, 50, 'back', style)
    mainMenuButton.anchor.setTo(0.5, 0.5)
    mainMenuButton.inputEnabled = true
    mainMenuButton.events.onInputDown.add(function() {
			game.state.start('mainmenu')
    })
  }

  return gameState
}
},{}],12:[function(require,module,exports){
module.exports = function(game) {

  var gameState = {}

  gameState.create = function () {

  	var style = { font: '40px Arial', fill: '#ffffff', align: 'center'}
  	var mainMenuButton = game.add.text(100, 50, 'back', style)
    mainMenuButton.anchor.setTo(0.5, 0.5)
    mainMenuButton.inputEnabled = true
    mainMenuButton.events.onInputDown.add(function() {
			game.state.start('mainmenu')
    })

  	var train = game.add.text(game.world.centerX, 300, 'train', style)
    train.anchor.setTo(0.5, 0.5)
    train.inputEnabled = true
    train.events.onInputDown.add(function() {
			game.state.start('train')
    })
  }

  return gameState
}

},{}],13:[function(require,module,exports){
var Player = require('../Player.js')

module.exports = function(game) {

  var gameState = {}

  var p1, p2

  gameState.create = function () {

  	var style = { font: '40px Arial', fill: '#ffffff', align: 'center'}
  	var mainMenuButton = game.add.text(100, 50, 'back', style)
    mainMenuButton.anchor.setTo(0.5, 0.5)
    mainMenuButton.inputEnabled = true
    mainMenuButton.events.onInputDown.add(function() {
			game.state.start('singleplayermenu')
      p1.ragdoll.destroy()
      p2.ragdoll.destroy()
    })

    game.physics.startSystem(Phaser.Physics.P2JS)
    game.physics.p2.gravity.y = 200

    p1 = new Player('me', game, 200, 200)
    p1.method0()

    p2 = new Player('dummy', game, 600, 200)
    p2.method0()
    
    // debug
    window.game = game
    window.p1 = p1
    window.p2 = p2
  }

  var frameCount = 0
  var newTurn = false

  gameState.update = function () {

    frameCount++

    if(p1.resetPlayback() || p2.resetPlayback()) {
      p1.method2()
      p2.method2()
      frameCount = 0
    }

    if(frameCount === 100) {
      frameCount = 0

      if(p1.ready() && p2.ready()) {
        p1.method1()
        p2.method1()
      } else {
        p1.method2()
        p2.method2()
      }
    }

    if(game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
      p1.isReady = true
      p2.isReady = true
    }
  }

  return gameState
}
},{"../Player.js":2}],14:[function(require,module,exports){
(function (global){
;__browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
// stats.js - http://github.com/mrdoob/stats.js
var Stats=function(){var l=Date.now(),m=l,g=0,n=Infinity,o=0,h=0,p=Infinity,q=0,r=0,s=0,f=document.createElement("div");f.id="stats";f.addEventListener("mousedown",function(b){b.preventDefault();t(++s%2)},!1);f.style.cssText="width:80px;opacity:0.9;cursor:pointer";var a=document.createElement("div");a.id="fps";a.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#002";f.appendChild(a);var i=document.createElement("div");i.id="fpsText";i.style.cssText="color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
i.innerHTML="FPS";a.appendChild(i);var c=document.createElement("div");c.id="fpsGraph";c.style.cssText="position:relative;width:74px;height:30px;background-color:#0ff";for(a.appendChild(c);74>c.children.length;){var j=document.createElement("span");j.style.cssText="width:1px;height:30px;float:left;background-color:#113";c.appendChild(j)}var d=document.createElement("div");d.id="ms";d.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";f.appendChild(d);var k=document.createElement("div");
k.id="msText";k.style.cssText="color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";k.innerHTML="MS";d.appendChild(k);var e=document.createElement("div");e.id="msGraph";e.style.cssText="position:relative;width:74px;height:30px;background-color:#0f0";for(d.appendChild(e);74>e.children.length;)j=document.createElement("span"),j.style.cssText="width:1px;height:30px;float:left;background-color:#131",e.appendChild(j);var t=function(b){s=b;switch(s){case 0:a.style.display=
"block";d.style.display="none";break;case 1:a.style.display="none",d.style.display="block"}};return{REVISION:11,domElement:f,setMode:t,begin:function(){l=Date.now()},end:function(){var b=Date.now();g=b-l;n=Math.min(n,g);o=Math.max(o,g);k.textContent=g+" MS ("+n+"-"+o+")";var a=Math.min(30,30-30*(g/200));e.appendChild(e.firstChild).style.height=a+"px";r++;b>m+1E3&&(h=Math.round(1E3*r/(b-m)),p=Math.min(p,h),q=Math.max(q,h),i.textContent=h+" FPS ("+p+"-"+q+")",a=Math.min(30,30-30*(h/100)),c.appendChild(c.firstChild).style.height=
a+"px",m=b,r=0);return b},update:function(){l=this.end()}}};
; browserify_shim__define__module__export__(typeof Stats != "undefined" ? Stats : window.Stats);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[4])
//# sourceMappingURL=data:application/json;base64,
